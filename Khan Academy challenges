--/or/ command 
    SELECT title FROM songs WHERE mood = "epic" OR released >1990;
    --/ and/ command 
    SELECT title FROM songs WHERE mood = "epic" AND released > 1990 AND duration < 240
    
   SELECT * FROM exercise_logs WHERE type = "biking" OR type = "hiking" OR type = "tree climbing" OR type = "rowing";

/* IN */ is a shortcut or a neater way to write the querry above. type allows you to select individual items in a column 
/*NOT IN*/ does the inverse of the IN command, that is, what is not in ()
SELECT * FROM exercise_logs WHERE type IN ("biking", "hiking", "tree climbing", "rowing");
*insert new table*
SELECT type FROM drs_favorites;

/subqueries/ 
-can select items that are in both tables in common 
SELECT * FROM exercise_logs WHERE type IN (
    SELECT type FROM drs_favorites);
    
SELECT * FROM exercise_logs WHERE type IN (
    SELECT type FROM drs_favorites WHERE reason = "Increases cardiovascular health");
 
 -This functions allows you to shorten the name in the actual table to find the one word that is common in the sentence 
 - the use of % is necessary to represent a wildcard that allows the function to work 
/* LIKE */

SELECT * FROM exercise_logs WHERE type IN (
    SELECT type FROM drs_favorites WHERE reason LIKE "%cardiovascular%");
Math operators may be used at any point in sql 
Round function may also be used in sql 

/CASE/ function is used to create a new column 

/* 50-90% of max*/
SELECT COUNT(*) FROM exercise_logs WHERE
    heart_rate >= ROUND(0.50 * (220-30)) 
    AND  heart_rate <= ROUND(0.90 * (220-30));
    
/* CASE */
SELECT type, heart_rate,
    CASE 
        WHEN heart_rate > 220-30 THEN "above max"
        WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"
        WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"
        ELSE "below target"
    END as "hr_zone"
FROM exercise_logs;

SELECT COUNT(*) number_grade, 
CASE 
    WHEN number_grade >90 THEN "A"
    WHEN number_grade >80 THEN "B"
    WHEN number_grade >70 THEN "C"
    ELSE "F"
END as "letter_grade"
FROM student_grades
GROUP BY "letter_grade";
